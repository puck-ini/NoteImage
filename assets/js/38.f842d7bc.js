(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{402:function(t,e,a){"use strict";a.r(e);var v=a(44),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"zookeeper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[t._v("#")]),t._v(" Zookeeper")]),t._v(" "),a("h2",{attrs:{id:"zookeeper-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-介绍"}},[t._v("#")]),t._v(" Zookeeper 介绍")]),t._v(" "),a("p",[t._v("ZooKeeper 是一个开源的分布式协调服务，ZooKeeper 的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("原语：")]),t._v(" 操作系统或计算机网络用语范畴。是由若干条指令组成的，用于完成一定功能的一个过程。具有不可分割性·即原语的执行必须是连续的，在执行过程中不允许被中断。")])]),t._v(" "),a("p",[t._v("ZooKeeper 是一个典型的分布式数据一致性解决方案，分布式应用程序可以基于 ZooKeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。")]),t._v(" "),a("h2",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("高可用。支持集群部署，只要半数以上节点存货，Zookeeper 就能正常服务")]),t._v(" "),a("li",[t._v("高新能。Zookeeper 适用于读操作多于写操作的场景，数据保存在内存中，保证了高吞吐量和低延迟。")])]),t._v(" "),a("h2",{attrs:{id:"节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点"}},[t._v("#")]),t._v(" 节点")]),t._v(" "),a("p",[t._v("节点是 Zookeeper 数据模型中的数据单元，一个节点必须以 “/” 符号开始，例如 /test/a。每个节点都有用于管理节点的属性，同时还可以保存数据内容。")]),t._v(" "),a("h3",{attrs:{id:"节点类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点类型"}},[t._v("#")]),t._v(" 节点类型")]),t._v(" "),a("p",[t._v("节点可以分为持久节点和临时节点两种，持久节点一旦创建会一直存在 Zookeeper 中，除非进行删除操作。临时节点的生命周期跟客户端的会话绑定，客户端一旦断开连接，该客户端创建的临时节点也会被删除。节点中还有一个特殊的节点为顺序节点，该节点会在创建时为节点的名字后面追加一串递增的整形编号，该编号又父节点维护。")]),t._v(" "),a("ul",[a("li",[t._v("持久节点")]),t._v(" "),a("li",[t._v("持久顺序节点")]),t._v(" "),a("li",[t._v("临时节点")]),t._v(" "),a("li",[t._v("临时顺序节点")])]),t._v(" "),a("p",[t._v("持久节点：即使 zookeeper 或者客户端断线都不会删除的节点。")]),t._v(" "),a("p",[t._v("临时节点：zookeeper 断开连接或者客户端断开连接都会把临时节点删除。（只会删除断开连接的客户端创建的临时节点）")]),t._v(" "),a("p",[t._v("顺序节点：给创建的节点一个递增的编号。")]),t._v(" "),a("p",[t._v("-e 表示创建临时节点，-s 表示创建顺序节点。图中创建 /test 节点下的 /test 节点会在节点名字后带上递增的序列号。")]),t._v(" "),a("p",[a("img",{attrs:{src:"img/zookeeper/image-20210802161021883.png",alt:"image-20210802161021883"}})]),t._v(" "),a("h3",{attrs:{id:"节点属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点属性"}},[t._v("#")]),t._v(" 节点属性")]),t._v(" "),a("p",[t._v("节点中保存了用于管理节点的属性。")]),t._v(" "),a("p",[t._v("stat 指令可以查看节点的属性")]),t._v(" "),a("p",[a("img",{attrs:{src:"img/zookeeper/image-20210802171026206.png",alt:"image-20210802171026206"}})]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("节点属性")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("cZxid")]),t._v(" "),a("td",[t._v("该数据节点被创建时的事务Id")])]),t._v(" "),a("tr",[a("td",[t._v("mZxid")]),t._v(" "),a("td",[t._v("该数据节点被修改时最新的事务Id")])]),t._v(" "),a("tr",[a("td",[t._v("pZxid")]),t._v(" "),a("td",[t._v("当前节点的父级节点事务Id")])]),t._v(" "),a("tr",[a("td",[t._v("ctime")]),t._v(" "),a("td",[t._v("该数据节点创建时间")])]),t._v(" "),a("tr",[a("td",[t._v("mtime")]),t._v(" "),a("td",[t._v("该数据节点最后修改时间")])]),t._v(" "),a("tr",[a("td",[t._v("cversion")]),t._v(" "),a("td",[t._v("子节点版本号（子节点修改次数，每修改一次值+1递增）")])]),t._v(" "),a("tr",[a("td",[t._v("dataVersion")]),t._v(" "),a("td",[t._v("当前节点版本号（每修改一次值+1递增）")])]),t._v(" "),a("tr",[a("td",[t._v("aclVersion")]),t._v(" "),a("td",[t._v("当前节点acl版本号（节点被修改acl权限，每修改一次值+1递增）")])]),t._v(" "),a("tr",[a("td",[t._v("dataLength")]),t._v(" "),a("td",[t._v("当前节点所存储的数据长度")])]),t._v(" "),a("tr",[a("td",[t._v("numChildren")]),t._v(" "),a("td",[t._v("当前节点下子节点的个数")])]),t._v(" "),a("tr",[a("td",[t._v("ephemeralOwner")]),t._v(" "),a("td",[t._v("临时节点标示，当前节点如果是临时节点，则存储的创建者的会话id（sessionId），如果不是，那么值=0")])])])]),t._v(" "),a("ul",[a("li",[t._v("Zxid")])]),t._v(" "),a("p",[t._v("Zxid 主要应用于 Zookeeper 集群。")]),t._v(" "),a("ul",[a("li",[t._v("版本")])]),t._v(" "),a("p",[t._v("cversion")]),t._v(" "),a("p",[t._v("dataVersion")]),t._v(" "),a("p",[t._v("aclVersion")]),t._v(" "),a("ul",[a("li",[t._v("数据内容")])]),t._v(" "),a("p",[t._v("dataLength")]),t._v(" "),a("p",[t._v("numChildren")]),t._v(" "),a("p",[t._v("ctime")]),t._v(" "),a("p",[t._v("mtime")]),t._v(" "),a("p",[t._v("ephemeralOwner")]),t._v(" "),a("h3",{attrs:{id:"节点权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点权限"}},[t._v("#")]),t._v(" 节点权限")]),t._v(" "),a("p",[t._v("节点通过 ACL （access control list）机制设置权限控制。需要注意的是 Zookeeper 的权限是基于节点级别的，节点之间的权限不具备继承性，即子节点不会继承父节点的权限。")]),t._v(" "),a("p",[t._v("ACL 权限格式由 <schema>:<id>:<acl> 组成")]),t._v(" "),a("p",[t._v("schema 表示授权方式：")]),t._v(" "),a("ul",[a("li",[t._v("world：表示任何人都可以访问")]),t._v(" "),a("li",[t._v("auth：只有认证用户可以访问")]),t._v(" "),a("li",[t._v("digest：使用用户名和密码的方式生成的 MD5 哈希值作为认证 ID")]),t._v(" "),a("li",[t._v("host/ip：使用客户端主机 IP 地址来进行认证")])]),t._v(" "),a("p",[t._v("id 表示权限的作用域，用来识别身份，根据 schema 选择哪种方式")]),t._v(" "),a("p",[t._v("acl 表示一个节点具有哪些权限，节点的权限有 create、delete、write、read、admin 统称cdwra")]),t._v(" "),a("h2",{attrs:{id:"watch-机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch-机制"}},[t._v("#")]),t._v(" watch 机制")]),t._v(" "),a("p",[t._v("watch机制：客户端可以通过 watcher 机制任意一个节点的数据变化（包含子节点的变化），一旦节点的数据变化 Zookeeper 就会通过发送事件的方式通知所有监听该节点的客户端。")]),t._v(" "),a("p",[t._v("watch 机制的实现是 Zookeeper 和客户端之间保持一个会话（Session），通过长连接实现。")]),t._v(" "),a("h3",{attrs:{id:"watch-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch-类型"}},[t._v("#")]),t._v(" watch 类型")]),t._v(" "),a("p",[t._v("节点可以设置两类的 watch，一种是 DataWatches，基于节点的数据变更从而触发 watch 事件，触发条件 getData()、exists()、setData()、create()；另一种是 Child Watcher，基于节点的子节点发生变更的 watch 事件，触发条件 getChildren()、create()。")]),t._v(" "),a("p",[t._v("delete()方法删除节点是会同时触发上述的两种 watch，被删除的节点有父节点，则父节点会触发 Child Watcher。")]),t._v(" "),a("h3",{attrs:{id:"watch-特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch-特性"}},[t._v("#")]),t._v(" watch 特性")]),t._v(" "),a("p",[t._v("watch 机制对节点的监听事件是一次性的，客户端如果需要继续监听该节点需要对节点监听事件设置为 True。")]),t._v(" "),a("h2",{attrs:{id:"zookeeper-常用指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-常用指令"}},[t._v("#")]),t._v(" Zookeeper 常用指令")]),t._v(" "),a("h2",{attrs:{id:"zookeeper-常见使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-常见使用场景"}},[t._v("#")]),t._v(" Zookeeper 常见使用场景")]),t._v(" "),a("h3",{attrs:{id:"注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册中心"}},[t._v("#")]),t._v(" 注册中心")]),t._v(" "),a("p",[t._v("Dubbo 中默认使用 Zookeeper 作为注册中心")]),t._v(" "),a("h3",{attrs:{id:"分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[t._v("#")]),t._v(" 分布式锁")]),t._v(" "),a("h3",{attrs:{id:"分布式队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式队列"}},[t._v("#")]),t._v(" 分布式队列")]),t._v(" "),a("h3",{attrs:{id:"配置管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置管理"}},[t._v("#")]),t._v(" 配置管理")]),t._v(" "),a("p",[t._v("Zookeeper 节点可以保存数据不超过1M的数据，同时可以通过 watch 机制实现配置更新的通知。")]),t._v(" "),a("h2",{attrs:{id:"zab-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zab-协议"}},[t._v("#")]),t._v(" Zab 协议")])])}),[],!1,null,null,null);e.default=_.exports}}]);